/* ファイル関係 */

#include "bootpack.h"
#include <stdio.h>
#include <string.h>

/**
 * ディスクイメージ内のFATの圧縮をとく
 */
void file_readfat(int *fat, unsigned char *img)
{
	int i, j = 0;
	for (i = 0; i < 2880; i += 2) {
		fat[i + 0] = (img[j + 0]      | img[j + 1] << 8) & 0xfff;
		fat[i + 1] = (img[j + 1] >> 4 | img[j + 2] << 4) & 0xfff;
		j += 3;
	}
	return;
}

/**
 * ファイルを読み込む
 */
void file_loadfile(int clustno, int size, char *buf, int *fat, char *img)
{
	int i;
	for (;;) {
		if (size <= 512) {
			for (i = 0; i < size; i++) {
				buf[i] = img[clustno * 512 + i];
			}
			break;
		}
		for (i = 0; i < 512; i++) {
			buf[i] = img[clustno * 512 + i];
		}
		size -= 512;
		buf += 512;
		clustno = fat[clustno];
	}
	return;
}

/**
 * search file in fileinfo using given name
 */
struct FILEINFO *file_search(char *name, struct FILEINFO *finfo, int max)
{
	int i, j;
	char s[12];
	for (j = 0; j < 11; j++) {
		s[j] = ' ';
	}
	j = 0;
	for (i = 0; name[i] != 0; i++) {
		if (j >= 11) { return 0; /* 見つからなかった */ }
		if (name[i] == '.' && j <= 8) {
			j = 8;
		} else {
			s[j] = name[i];
			if ('a' <= s[j] && s[j] <= 'z') {
				/* 小文字は大文字に直す */
				s[j] -= 0x20;
			}
			j++;
		}
	}
	for (i = 0; i < max; ) {
		if (finfo->name[0] == 0x00) {
			break;
		}
		if ((finfo[i].type & 0x18) == 0) {
			for (j = 0; j < 11; j++) {
				if (finfo[i].name[j] != s[j]) {
					goto next;
				}
			}
			return finfo + i; /* ファイルが見つかった */
		}
		next:
		i++;
	}
	return 0; /* 見つからなかった */
}

/**
 * search my file in my filesystem using name.
 * [TASK]
 * dinfo内のディレクトリファイルを探し出すためには、この関数の
 * アルゴリズムを書きなおす必要がある！
 * @name: Ex. "hoge.txt", "foo.hrb"
 */
struct MYFILEINFO *myfile_search(char *name, struct MYDIRINFO *dinfo, int max)
{
	int i, j;
	char s[12];
	for (j = 0; j < 11; j++) {
		s[j] = ' ';
	}
	j = 0;
	for (i = 0; name[i] != 0; i++) {
		if (j >= 11) { return 0; /* 見つからなかった */ }
		if (name[i] == '.' && j <= 8) {
			j = 8;
		} else {
			s[j] = name[i];
			if ('a' <= s[j] && s[j] <= 'z') {
				/* 小文字は大文字に直す */
				s[j] -= 'a'-'A';
			}
			j++;
		}
	}

	for (i = 0; i < max; ) {
		// ファイル名が無い場合、これ以上先にファイルがないので処理を終了させる。
		if (dinfo->finfo[i].name[0] == 0x00) {
			break;
		}

		/* ファイル名がある場合, finfoのfiletypeの識別をする */
		/* finfoがファイルの場合(今は２種類しかない) */
		if (dinfo->finfo[i].type == 0x20) {
			for (j = 0; j < 11; j++) {
				if (dinfo->finfo[i].name[j] != s[j]) {
					goto next;
				}
			}
			return dinfo->finfo + i; /* ファイルが見つかった */

			/* finfoがディレクトリの場合 */
		}else if(dinfo->finfo[i].type == 0x10){
			// ディレクトリは拡張子がないのでファイル名だけ比較する
			for (j = 0; j < 8; j++) {
				if (dinfo->finfo[i].name[j] != s[j]) {
					goto next;
				}
			}
			return dinfo->finfo + i; /* ディレクトリが見つかった */
		}
		next:
		i++;
	}
	return 0; /* 見つからなかった */
}

/**
 * load file
 */
char *file_loadfile2(int clustno, int *psize, int *fat)
{
	int size = *psize, size2;
	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
	char *buf, *buf2;
	buf = (char *) memman_alloc_4k(memman, size);
	file_loadfile(clustno, size, buf, fat, (char *) (ADR_DISKIMG + 0x003e00));
	if (size >= 17) {
		size2 = tek_getsize(buf);
		if (size2 > 0) {	/* tek圧縮がかかっていた */
			buf2 = (char *) memman_alloc_4k(memman, size2);
			tek_decomp(buf, buf2, size2);
			memman_free_4k(memman, (int) buf, size);
			buf = buf2;
			*psize = size2;
		}
	}
	return buf;
}


/**
 * 有効なdinfoを検索/表示する関数
 */
int mydir_search(struct CONSOLE *cons){
	char s[50];
	struct MYDIRINFO *dinfo = (struct MYDIRINFO *)ROOT_DIR_ADDR;
	struct MYDIRINFO *temp_dinfo;
	int i = 0, dir_num = -1;
	struct MYDIRINFO *this_dinfo;

	///* debug code: Viewing behavior of mydir_search().
	sprintf(s, "/*** IN FUNCTION mydir_search() ***/\n");
	cons_putstr(cons, s);
	//*/

	// 有効なdinfoを検索/表示する
	for(i=0, temp_dinfo = dinfo; temp_dinfo->this_dir != 0x00000000 ; i++, temp_dinfo++){
		dir_num++;
		this_dinfo = temp_dinfo->this_dir;

		///* debug code: Viewing behavior of mydir_search().
		sprintf(s, "dinfo[%d] addr = 0x%08x\n", i, this_dinfo);
		cons_putstr(cons, s);
		//*/
	}
	///* debug code: Viewing behavior of mydir_search().
	sprintf(s, "dinfo[%d].this_addr = 0x%08x\n", i, temp_dinfo->this_dir);
	cons_putstr(cons, s);
	this_dinfo = temp_dinfo->this_dir;
	sprintf(s, "max available dir number is %d\n", dir_num);
	cons_putstr(cons, s);
	sprintf(s, "/*********************************/\n");
	cons_putstr(cons, s);
	//*/

	return dir_num;
}

// ファイルをデータ管理領域からコピーして、コピー先の番地を教える
struct MYFILEDATA *myfopen(char *filename){
	// とりあえずルートディレクトリにあるファイルに対してのみ実行することにする。
	struct MYDIRINFO *dinfo = (struct MYDIRINFO *)ROOT_DIR_ADDR;
	struct MYFILEINFO *finfo = myfile_search(filename, dinfo, 224);
	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
	unsigned int mem_addr;
	if(finfo == 0){
		/* 該当するファイルがROOTディレクトリに存在しなかった場合 */
		debug_print("In function myfopen(): file was not found.\n");
		return 0;
	}else{
		/* openのときにはSTAT_OPENEDは確認しない (要検討)*/
		finfo->fdata->head.stat |= STAT_OPENED;
		mem_addr = memman_alloc_4k(memman, 1*8); // 4,096 byte確保
		memcpy((unsigned int *)mem_addr, finfo->fdata, sizeof(finfo->fdata));
		return (struct MYFILEDATA *)mem_addr;
	}
	return 0;
}
// データ管理領域の該当ファイルがオープンされていたら、メモリを解放し、status bitのopenedを書き換える。
int myfclose(struct MYFILEDATA *opened_fdata){
	// データ領域にある実物のデータをfdataに格納する
	struct MYFILEDATA *fdata = (struct MYFILEDATA *)opened_fdata->head.addr;
	unsigned char status;
	char s[30];	// デバッグ用

	sprintf(s, "*fdata = 0x%08x\n", fdata);
	debug_pring("s");	//0x0500 0000だと成功！

	if((fdata->head.stat & STAT_OPENED) == 0){
		/* オープンされていないファイルをクローズした場合 */
		debug_print("In function myfclose: this file data is already closed.\n");
		return 0;	// close失敗
	}else{
		status = opened_fdata->head.stat;
		sprintf(s, "status = 0x%08x\n", status);
		debug_print(s);
		status = status & (STAT_ALL - STAT_OPENED);	// open bitを折る
		sprintf(s, "status = 0x%08x\n", status);
		debug_print(s);
		// ↓これはたぶんなくても大丈夫？
		fdata->head.stat = status;
		sprintf(s, "fdata->head.stat = 0x%08x\n", fdata->head.stat);
		debug_print(s);
		// memcpy(fdata->head.stat, status, sizeof(unsigned char));
		return 1;	// close成功
	}

	return 0;
}
// データ管理領域の該当ファイルがセーブ可能ならば、fdata->bodyの内容を保存する
int myfsave(struct MYFILEDATA *opened_fdata){
	struct MYFILEDATA *fdata = (struct MYFILEDATA *)opened_fdata->head.addr;

	if((fdata->head.stat & STAT_OPENED) == 0){
		/* オープンされていないファイルに対して保存しようとした場合 */
		debug_print("In function myfsave: this file data is not opened.\n");
		return 0;	// close失敗
	}else{
		/* ブロックを跨いで保存するときはもっと違うアルゴリズムが必要になる(要検討) */
		memcpy(fdata->body, opened_fdata->body, BLOCK_SIZE);
		return 1;	// close成功
	}

	return 0;
}
